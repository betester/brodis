import Head from "next/head";
import { ChakraInput, SearchCard } from "@/component";
import {
  Box,
  Button,
  Center,
  Grid,
  Heading,
  Text,
  Alert,
  AlertIcon,
  VStack,
  useDisclosure,
  Fade,
  Collapse,
  Card,
  CardHeader,
  CardBody,
  HStack,
  Avatar,
  Link,
  Tooltip,
  Flex,
  useMediaQuery,
  Drawer,
  DrawerBody,
  DrawerFooter,
  DrawerHeader,
  DrawerOverlay,
  DrawerContent,
  DrawerCloseButton,
  IconButton,
} from "@chakra-ui/react";
import { useContext, useEffect, useState } from "react";
import { AuthContext, MatchmakingContext } from "@/context";
import { FcSearch } from "react-icons/fc";
import { getLocation, logOut } from "@/service";
import { useRouter } from "next/router";
import React from "react";

export default function Home() {
  const { rooms, startSearch, stopSearch, searching } =
    useContext(MatchmakingContext);
  const [searchArguments, setSearchArguments] = useState({
    targetMember: null,
  });
  const [location, setLocation] = useState<string>();
  const { setUser } = useContext(AuthContext);
  const router = useRouter();
  const handleOnChange = (e: React.FormEvent<HTMLInputElement>) => {
    setSearchArguments({
      ...searchArguments,
      [e.currentTarget.id]: e.currentTarget.value,
    });
  };

  const drawer = (
    <VStack p="2em 1em" alignItems={"start"} spacing="1em" height={"100%"}>
      <Text fontWeight={"bold"} color="blue.200" fontSize={"1.2rem"}>
        Description
      </Text>
      <Text>
        This is a matchmaking service that will find you a room randomly. The
        searching process is done by using{" "}
        <Link
          href="https://en.wikipedia.org/wiki/Raft_(algorithm)"
          display={"inline"}
          color={"cyan"}
        >
          Raft Algorithm
        </Link>
      </Text>
      <Fade in={!searching}>
        {!searching && (
          <VStack gap="1em">
            <ChakraInput
              label={"Maximum member"}
              id={"targetMember"}
              value={searchArguments.targetMember}
              onChange={handleOnChange}
            />
            <Alert status="warning">
              <AlertIcon />
              You can only search one room at a time
            </Alert>
            <Button
              onClick={() => startSearch(searchArguments.targetMember!)}
              alignSelf={"flex-end"}
              colorScheme="cyan"
            >
              Search
            </Button>
          </VStack>
        )}
      </Fade>
      <Collapse style={{ width: "100%" }} in={searching}>
        {searching && (
          <SearchCard
            location={location!}
            targetMember={searchArguments.targetMember!}
            cancelSearch={stopSearch}
          />
        )}
      </Collapse>
    </VStack>
  );

  useEffect(() => {
    const getBestLocation = async () => {
      setLocation(await getLocation());
    };

    getBestLocation();
  }, []);

  const onLogOut = () => {
    logOut();
    stopSearch();
    setUser(null);
    router.replace("/login");
  };

  const [isLargerThan600] = useMediaQuery("(min-width: 600px)");

  const { isOpen, onOpen, onClose } = useDisclosure();

  return (
    <Box>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex justifyContent={"space-between"} p="1rem" width={"100%"}>
        <Heading>
          <FcSearch onClick={isLargerThan600 ? () => {} : onOpen} />
        </Heading>
        <Button onClick={onLogOut} bgColor={"red"}>
          Log Out
        </Button>
      </Flex>
      <Grid
        width={"100%"}
        height={"100%"}
        columnGap={"3em"}
        templateColumns={isLargerThan600 ? "1.2fr 3fr" : "1fr"}
        pl="1em"
      >
        {!isLargerThan600 ? (
          <Drawer
            onClose={onClose}
            isOpen={isOpen}
            placement="left"
            size={"full"}
          >
            <DrawerOverlay />
            <DrawerContent>
              <DrawerHeader borderBottomWidth="1px">
                <DrawerCloseButton />
                Search Room
              </DrawerHeader>
              <DrawerBody>{drawer}</DrawerBody>
            </DrawerContent>
          </Drawer>
        ) : (
          drawer
        )}

        {rooms ? (
          <Box height={"100%"}>
            <Heading>Joined Room</Heading>
            <Grid
              height={"100%"}
              pt="2em"
              pr="2em"
              templateColumns={isLargerThan600 ? "repeat(3,1fr)" : "1fr"}
              w={"100%"}
              columnGap={"1em"}
              rowGap={"1em"}
            >
              {rooms.map((room, index) => {
                return (
                  <Card key={index}>
                    <CardHeader fontWeight={"bold"}>
                      {room.room_leader.split("@")[0]} room
                    </CardHeader>
                    <CardBody>
                      <Grid templateColumns="repeat(auto-fit, 60px)">
                        {room.members
                          .slice(0, 5)
                          .map((member: any, memberIndex: number) => {
                            return (
                              <Tooltip key={memberIndex} label={member}>
                                <Avatar />
                              </Tooltip>
                            );
                          })}
                      </Grid>
                    </CardBody>
                  </Card>
                );
              })}
            </Grid>
          </Box>
        ) : (
          <Center height={"100%"}>
            <Text>There seems to be no room yet...</Text>
          </Center>
        )}
      </Grid>
    </Box>
  );
}
